LESSON 1: HTML Basics
What is HTML?
(HyperText Markup Language) = tool we use to create websites
HTML = giving instructions to a computer
Syntax = rules for writing code or it is a grammer (for code)
<a> = anchor element, an anchor is basically a link to another websites
HTML Attribute = modifies how an element behaves
Extra spaces are ignored (in HTML)
Extra new lines are also ignored (in HTML)
Generally in html and css we use 2 spaces per indent

LESSON 2: CSS Basics
CSS (Cascading Style Sheets) = change the appearence of HTML elements
CSS Selector = which elements we are targeting
General Technique:
1. Create element with HTML
2. Style with CSS one-by-one
Space (around an element) = margin
The trick to getting the rounded buttons is we have to set the border radius to half the height or the width whichever is lower

LESSON 03: HOVERS, TRANSITIONS, SHADOWS
pseudo-class = it basically adds extra styles in a certain situation
opacity = used to fade out an element (1 to 0 => going to fade out)
transition property takes 2 values: what we want to transition, and how long this transition will take
Usually a good transition duration is somehting like 0.15s (seconds)
Make sure to put the transition property always in sort of base CSS
box-shadow takes 4 values: horizontal right , vertical down, blur, color 
Usually shadows are kind of a darker shade of whatever they are covering   
shadows are best when they are very subtle, it should not be too noticeable

LESSON 04: Chrome devTools and CSS box model
margin = first part of the box model i.e. spacing on the outside of the element
padding = second part of the box model i.e. spacing on the inside of the element
setting width and height of button is not a good idea, by default button actually adjusts the size automatically based on the content
so using padding is better alternative for height and width
CSS Box Model
- how much space an element takes up
- how far it is away from other elements
By default the browser tries to align our buttons based on the text

LESSON 05: Text styles
so website by default use the font called Times New Roman
HTML entity = lets us type out some special characters, for example 'dot' or 'checkmark'
<p> by default, come with margin at the top and bottom 
CSS Specificity = The selector that's more specific has higher priority
class name selector > element name selector
Text element = a element that is inside a line of text and then they modify that part of the text
span element is the most generic text element, it has no default styles we can style it ourselves and give it any style we want
NOTE: Block-level elements (e.g., <p>, <div>) by default respect margins and padding, creating space around them. Inline elements (e.g., <span>, <a>) do not create line breaks and do not respect top and bottom margins or padding.

LESSON 06: HTML Structure
<!DOCTYPE html> =  this line tells a browser to use modern version of html
Every file has one and only one html element and <html> = web page, this element is designed for nesting to contain one head and one body element 
So head and body elements are also designed for nesting or to have elements inside
<body> = contains all the elements that are visible on the page
<head> = contains all the elements that are not visible on the page
The really useful feature we get by following the structure is tha ability to automatically reload our page whenever we change our code using the extension 'live server'
void elements = elements that don't need a closing tag for e.g. <link> element
Filepaths: styles/buttons.css = in this filepath '/' means we are going into the styles folder
Features we get from following this HTML structure:
1. <title>  
2. Live server
3. Link CSS files
4. Add new fonts and more

LESSON 07: Images and Text Boxes
when we set the width, height will also adjust so that the image has the same dimensions (it keeps the same shape)
object-fit = img element has this property of its own which determines what happen is the size doesnt match the images dimensions or shape
We can adjust which part of the image that we see using another property called object-position
'object-fit: cover' = this tells the image to cover the full given area and it also going to keep its shape
'object-fit: contain' = this property shrinks the area until it is contained in that given area

LESSON 08: CSS Display Property
in HTML there are 3 types of elements
1. block element = takes up the entire line (<p> by default is a block element), so this is how block elements work regardless of how much space they actually take up they take up the entire line, they're forced to be on their own line
2. inline-block element = only takes up as much space as needed (<img> and <input> element)
3. inline element = they are basically just text elements, they appear within a line of text (<strong> element) 

LESSON 09: THE DIV ELEMENT
<div> stands for division, it is just a box, also it is a block element
The key feature of a div is that it can contain any other elements inside, we can put <p> <img> as well as other divs
<div> = containers and containers are so useful for making complex websites
The div is simply just drawing a box around the content inside
Containers are so useful bcuz block elements take up the entire line in their container
NOTE: In HTML, block-level elements like div will not render visibly if they have no content and no height, if the div is empty and has no height specified, it will collapse to zero height and might not be visible, if the div is inside a parent element with constraints (like zero height), it might not be visible.
display: block causes elements to take up the entire line, so they can't be centered

LESSON 10: Nested Layouts Technique
images by default overflow, they keep their original size and that causes them to overflow
To get image fit inside their container or inside the column grid, we have to set width to 100%
font-family: Roboto, 'Arial' = this syntax with a comma is called font stack, it lets us setup a backup font
vertical layout = columns; we create mostly with <div>s (block element)
horizontal layout = rows; we create mostly with flexbox or grid

LESSON 11: CSS Grid
We have some problems with inline-Block
1. first one is that is has some alignment problems
2. second problem is that it's not vertically aligned
That's why we use css grid to create perfectly aligned horizontal layouts
Inline styles = writing our css inside a line of html
What is a grid?
A grid is a layout that has rows and columns
1 by 2 grid = 1 rows, 2 columns
To create grid we need two steps, first step to set the display property and the second step is we need to set how many columns our grid has
Few characteristics of grid:
1. when <div> is inside a grid, it doesnt take up the entire line, instead it only takes up the entire column
2. there is no extra space between two elements unlike with display inline-block
3. when we add more elements this make the div (inside grid) taller but all divs (inside grid) are vertically aligned
Grids maintain alignment much better
So whenever we have more elements than columns we have, grid starts to wrap around and create new rows
fr is special value in grid that stands for free space, so 1fr tells the columns to take up the remaining amount of space and number in front of it '1' tells us relatively how much of the remaining space that column gets, this number is sort of like a ratio
If there are two columns and both of them are 1fr, they will get equal amount of the remaining space

LESSON 12: Flexbox
Flexbox is similar to CSS Grid but its more flexible, it is an another way to create horizontal layouts while maintaining alignment
'flex: 1' is the flexbox equivalent to 1fr in grid
'flex: 2' is the flexbox equivalent to 2fr in grid
The layout is more rigid (for Grid), while in flexbox the elements take their width along with them if they move around and that causes us to have flexible layouts depending on how many elements we have and what order they are in
Grid = rigid layout
Flexbox = flexible layout
Flexbox vs Grid: Which one to use??
We could create horizontal layouts with grid but when layout actually changes that would be a great situation to use flexbox instead of grid
To change elements into how they are aligned horizontally = 'justify-content'
'align-items' = determines how the elements are aligned vertically in flexbox (default value is stretch)
The body element has 8 pixels of margin on every side by default
'max-width: 300px' = this property says that the width can be less than 300 pixels but as soon as it grows to be over 300 pixels we are going to limit it to 300
We just use a flexbox to spread out our content evenly across the horizontal space, so when we focus on content size first, we use a flexbox  
When we want to create a grid, we use grid
And for more other situations (for e.g the horizontal layout) we can use either grid or flexbox

LESSON 13: Nested Flexbox
Flexbox doesn't actually go down 2 layers, it only affects elements on the first layer
Weird behavior of flexbox:
If we resize our browser and make it smaller, flexbox start shrinking the items inside bcuz flexbox is flexible
So flexbox has a special property to prevent certain items from shrinking and then it keeps the widht of flexbox and doesnt shrink
'flex-shrink: 0;' = dont shrink
'width: 0;' = shrink

